plugins {
    application
    
    // adding integration tests
    id("jvm-test-suite")

    id("maven-publish")
}

// check installed toolchains: ./gradlew -q javaToolchains
java {
    toolchain {
        // set java version
        languageVersion.set(JavaLanguageVersion.of(19))
    }
}

repositories {
    mavenCentral()
}

// maven publishing
publishing {
    publications {
        create<MavenPublication>("maven") {
            groupId = "testing.com.vighnesh53"
            artifactId = "my-lib"
            version = "1.1"

            from(components["java"])

            pom {
                name.set("My library")
                description.set("A concise description of my library")
                url.set("http://www.example.com/library")
                properties.set(mapOf(
                    "myProp" to "value",
                    "prop.with.dots" to "anotherValue"
                ))
                licenses {
                    license {
                        name.set("MIT License")
                        url.set("https://choosealicense.com/licenses/mit/#")
                    }
                }
                developers {
                    developer {
                        id.set("vighnesh153")
                        name.set("Vighnesh Raut")
                        email.set("me@vighnesh153.com")
                    }
                }
                scm {
                    // git and github stuff
                    connection.set("scm:git:git://example.com/my-library.git")
                    developerConnection.set("scm:git:ssh://example.com/my-library.git")
                    url.set("http://example.com/my-library/")
                }
            }
        }
    }
    repositories {

    }
}

// ./gradlew run --args pokemonEvolutions
application {
    mainClass.set("com.vighnesh153.PikachuService")   
}

// ./gradlew runJar
tasks.register<JavaExec>("runJar") {
    // whatever is generated by "jar" task, register those classpaths
    classpath(tasks.named<Jar>("jar").map { it.outputs })

    // needed to access runtime libraries
    classpath(configurations.runtimeClasspath)

    // what main class should be run
    mainClass.set("com.vighnesh153.PikachuService")   

    // extra arguments
    args("pokemonEvolutions")
}

// Following doesn't work with external libs. Need more configuration
// java -jar build/libs/pokemon.jar pokemonEvolutions
tasks.named<Jar>("jar") {
    archiveFileName.set("pokemon.jar")
    manifest {
        attributes(mapOf("Main-Class" to "com.vighnesh153.PikachuService"))
    }
}

// ./gradlew test --tests PikachuServiceTest.getPikachuStat
// tasks.withType<Test>().configureEach {
//     useJUnitPlatform()
//     // include("**/*PikachuServiceTest*")
// }

// adding integration tests
testing {
    suites {
        val test by getting(JvmTestSuite::class) {
            useJUnitJupiter()
        }

        register<JvmTestSuite>("integrationTest") {
            dependencies {
                implementation(project())
            }
        }
    }
}

// adding integration test task as dependency in check task
tasks.check {
    dependsOn(testing.suites.named("integrationTest"))
}

buildscript {
    extra.apply {
        set("junitJupiterVersion", "5.9.3")
    }
}

dependencies {
    // val junitJupiterVersion = rootProject.extra["junitJupiterVersion"]
    // testImplementation("org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion")
    // testImplementation("org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion")
    // testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion")

    implementation("org.apache.commons:commons-lang3:3.12.0")
}

tasks.withType<JavaCompile>().configureEach {
    options.isVerbose = true
}

tasks.withType<ProcessResources>().configureEach {
    // only txt files
    include("**/*.txt")
}
