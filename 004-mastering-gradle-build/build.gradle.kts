/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.6/samples
 * This project uses @Incubating APIs which are subject to change.
 */

import org.apache.tools.ant.filters.ReplaceTokens

description = "Hi there"
group = "com.vighnesh153"
version = "1.0-SNAPSHOT"

plugins {
    id("base")
    id("org.barfuin.gradle.taskinfo") version "2.0.0"
}

// Order matters. Gradle will search for dependencies in the
// repositories, in the order specified here. So, to improve 
// performance, you should place the repository with most 
// dependencies (in your project) at the top
repositories {
    // Maven repository
    mavenCentral()

    // Google's repository
    google()

    // Third-party/Custom repositories
    maven {
        url = uri("https://repo.spring.io/release")
    }
    maven {
        url = uri("https://repository.jboss.org/maven2")
    }
}

dependencies {
    // https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils
    implementation("commons-beanutils:commons-beanutils:1.9.4")
    // implementation(group = "commons-beanutils", name = "commons-beanutils", version = "1.9.4")
}

tasks.register("sayHello") {
    group = "My Project Group"
    description = "This prints 'hello' on the console"

    // Setting this to "false" will make sure that this 
    // task is not executed when running `./gradlew <task-name>`
    enabled = true

    // Similar to enabled, above, but this accepts a lambda
    // which should return a boolean
    onlyIf {
        true
    }

    doFirst {
        println("About to print 'Hello'!")
    }

    doLast {
        println("Hello")
    }
}

tasks.register<Delete>("deleteDirs") {
    delete("deleteMeDir_old")
}

// Overriding tasks
tasks.named("sayHello") {
    group = "My Project Group - overriddenName"
}
tasks.named<Delete>("deleteDirs") {
    delete("deleteMeDir")
}
tasks.clean {
    doFirst {
        println("Starting cleaning...")
    }
    doLast {
        println("Completed cleaning!")
    }
}

// Task dependencies
tasks.register("task-dependencies-1") {
    mustRunAfter("task-dependencies-2")
}
tasks.register("task-dependencies-2") {}
tasks.register("task-dependencies-3") {
    dependsOn(
        tasks.named("task-dependencies-1"),
        tasks.named("task-dependencies-2"),
    )

    // just like finally block in try-catch-finally
    // This runs even if some error occurs in current task
    finalizedBy(tasks.named("task-dependencies-4"))
}
tasks.register("task-dependencies-4")


// Tasks inputs and outputs
tasks.register<Copy>("task-io-1") {
    from("descriptions")

    // Output of this task
    into("$buildDir/descriptions")
    filter(ReplaceTokens::class, "tokens" to mapOf("THEME_PARK_NAME" to "Shreya's park"))
}
tasks.register<Zip>("task-io-2") {
    // Uses outputs from task-io-1 as in input to
    // this file
    // Automatically addes dependency on "task-io-1"
    from(tasks.named("task-io-1"))
    destinationDirectory.set(buildDir)
    archiveFileName.set("descriptions.zip")
}